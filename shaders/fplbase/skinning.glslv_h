// Copyright 2015 Google Inc. All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

#ifdef SKINNED

// TODO: Move this outside of this file, so that before including this file,
//       you have to define this constant in your shader.
// Maximum number of animated bones that have vertices weighted to them.
// If using anim_pipeline to generate the meshes, you can see which bones
// are assigned indices in the shader by running,
// anim_pipeline --info my_model.fbx
const int kMaxNumShaderBones = 35;

// Maximum number of animated bones that have vertices weighted to them.
// If using anim_pipeline to generate the meshes, you can see which bones
// are assigned indices in the shader by running,
//     anim_pipeline --info my_model.fbx

// Each bone is an affine transform. Since OpenGL ES2 doesn't support 4x3
// matrices, we represent the affine transform as three vec4s.
const int kNumVec4sInAffineTransform = 3;

// Up to four indices into the bone_transforms[] array. Integers.
// Each vertex is a linear combination of these four transforms.
attribute vec4 aBoneIndices;

// Percentage of the four indices in aBoneIndices. Must sum to 1.
// e.g. When only aBoneIndices.x is used, will be (1,0,0,0).
attribute vec4 aBoneWeights;

// Affine transforms from the bone's origin to the mesh's root origin.
// Since affine transforms only require 3 rows, because 'w' is always
// (0, 0, 0, 1), we represent the bones as a vec4 array to save memory.
// Note: To facilitate the max number of bone transforms, while still
// allowing non-bone uniforms as well, the max size is subtracted by
// 'kMaxNonBoneVectorUniforms'.
uniform vec4 bone_transforms[kMaxNumShaderBones * kNumVec4sInAffineTransform];

// Helper function to convert from 3x vec4 from 'bone_transforms' to a mat4.
// Since we store elements in the 'bone_transforms' as a vec4 array, which
// represent a mat3x4, this function combines them into a single mat4 with
// a 'w' row set to (0, 0, 0, 1).
// Note: This function returns the transpose of the bone affine transform.
mat4 BoneTransformMatrixTranspose(int i) {
  return mat4(bone_transforms[i * 3 + 0],
              bone_transforms[i * 3 + 1],
              bone_transforms[i * 3 + 2],
              vec4(0, 0, 0, 1));
}

// Return vertex position w.r.t. bone positions.
// Vertex is attached to a single bone.
// aBoneIndices.yzw are ignored.
// aBoneWeights is assumed to be: (1, 0, 0, 0)
vec4 OneBoneSkinnedPosition(vec4 position) {
  return position * BoneTransformMatrixTranspose(int(aBoneIndices.x));
}

#endif  // SKINNED
