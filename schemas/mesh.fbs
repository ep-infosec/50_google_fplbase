// Copyright 2015 Google Inc. All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Definitions for meshes.

include "common.fbs";
include "materials.fbs";

namespace meshdef;

// Current mesh version is specified with `MostRecent`.
// When a breaking data change is introduced, increment the `MostRecent`
// enum value. The mesh_pipeline always outputs in the MostRecent format,
// but hand-created meshes (for example, a mesh specified in a json file)
// can leave MeshVersion as Unspecified to eschew the version check on load.
enum MeshVersion : ushort {
  Unspecified = 0,  // Eschew version check on load.
  MostRecent = 1    // Increment on every breaking format change.
}

table Surface {
  indices:[ushort] (id: 0);  // Used when there's less than 64k indices.
  indices32:[uint] (id: 2);  // Used when there's more than 64k indices.
  material:string (id: 1, required);  // e.g. "materials/example.bin"
  material_info:matdef.Material (id: 3);
}

enum Attribute : ubyte {
  END,
  Position3f,
  Normal3f,
  Tangent4f,  // Tangent vector in xyz, handedness in w.
  TexCoord2f,
  TexCoordAlt2f,
  Color4ub,
  BoneIndices4ub,
  BoneWeights4ub,
  Position2f,
  TexCoord2us,
  Orientation4f,  // Quaternion as (vector.xyz, scalar); sign(w) is handedness.
}

table Mesh {
  surfaces:[Surface] (id: 0, required);

  // Attributes in non-interleaved format (id 1..7, 14, 18).
  // These define the format merely by their presense, no Attribute enum needed.
  positions:[fplbase.Vec3] (id: 1);
  normals:[fplbase.Vec3] (id: 2);
  tangents:[fplbase.Vec4] (id: 3);  // Tangent + handedness.
  colors:[fplbase.Vec4ub] (id: 4);
  texcoords:[fplbase.Vec2] (id: 5);
  texcoords_alt:[fplbase.Vec2] (id: 14); // E.g. lightmap coordinates.
  skin_indices:[fplbase.Vec4ub] (id: 6);  // reference bones
  skin_weights:[fplbase.Vec4ub] (id: 7);  // sum to 1
  orientations:[fplbase.Vec4] (id: 18);

  // Attributes in interleaved format (id 16..17).
  // This can be specified instead of the attribute vectors above.
  // This may be more efficient to load if the engine also prefers interleaved.
  attributes:[Attribute] (id: 16);
  vertices:[ubyte] (id: 17);

  // These below are used regardless of interleaved or not.
  max_position:fplbase.Vec3 (id: 8);
  min_position:fplbase.Vec3 (id: 9);
  bone_names:[string] (id: 10);  // For debugging.
  // Local transform from parent to bone's pivot.
  bone_transforms:[fplbase.Mat3x4] (id: 11);
  // Animation data must have the same hierarchy.
  bone_parents:[ubyte] (id: 12);
  // Maps to the mesh bone index to the shader bone index. The mesh bones are
  // all the bones. The shader bones are the subset of bones that have at least
  // one vertex weighted to them.
  shader_to_mesh_bones:[ubyte] (id: 13);
  version:MeshVersion = Unspecified (id: 15);
}

root_type Mesh;
file_identifier "FMSH";
file_extension "fplmesh";

